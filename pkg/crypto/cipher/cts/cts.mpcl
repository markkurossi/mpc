// -*- go -*-
//
// Copyright (c) 2024 Markku Rossi
//
// All rights reserved.
//

// Package cts implements the ciphertext stealing (CTS) mode of
// operation for block ciphers. The implementation uses the CTS-3
// (Kerberos) variant for formatting the cipher text.
package cts

import (
	"crypto/aes"
)

// EncryptAES128 encrypts the data in AES-CTS mode. The key specifies
// the AES encryption key and iv is a random initialization vector.
func EncryptAES128(key [16]byte, iv [aes.BlockSize]byte, data []byte) []byte {
	numBlocks := len(data) / aes.BlockSize
	tail := len(data) % aes.BlockSize

	if tail != 0 {
		numBlocks++
	} else {
		tail = aes.BlockSize
	}
	if numBlocks < 2 {
		panic("ctx.EncryptAES128: input must be at least 2 block")
	}
	var block [aes.BlockSize]byte
	block = memcpy(block, 0, iv, 0)

	var plain [aes.BlockSize]byte
	var cipher [len(data)]byte

	// Standard CBC for the first numBlocks-1 blocks.
	for i := 0; i < numBlocks-1; i++ {
		plain = memcpy(plain, 0, data, i*aes.BlockSize)
		for j := 0; j < aes.BlockSize; j++ {
			plain[j] ^= block[j]
		}
		block = aes.EncryptBlock(key, plain)
		if i < numBlocks-2 {
			// Store standard CBC output block.
			cipher = memcpy(cipher, i*aes.BlockSize, block, 0)
		} else {
			// Store last ciphertext block.
			cipher = memcpy(cipher, (numBlocks-1)*aes.BlockSize, block, 0)
		}
	}

	// Create last input block.
	plain = memcpy(plain, 0, data, (numBlocks-1)*aes.BlockSize)
	for i := tail; i < aes.BlockSize; i++ {
		plain[i] = 0
	}
	for j := 0; j < aes.BlockSize; j++ {
		plain[j] ^= block[j]
	}
	block = aes.EncryptBlock(key, plain)
	cipher = memcpy(cipher, (numBlocks-2)*aes.BlockSize, block, 0)

	return cipher
}

func memcpy(dst []byte, dstOfs int, src []byte, srcOfs int) []byte {
	for i := 0; srcOfs+i < len(src) && dstOfs+i < len(dst); i++ {
		dst[dstOfs+i] = src[srcOfs+i]
	}
	return dst
}
